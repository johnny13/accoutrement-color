// Color Config
// ============
// Configure and access your color palette.


// Color Map
// ---------
/// Define your colors with a `name`, `value`,
/// and optional `adjustments`.
///
/// @group a-config
///
/// @property {color | string | list} <color-name> -
///   Each color in the map consists of a name (key),
///   and a value defining that color's origin,
///   along with optional `adjustments`.
///   Color origins can be CSS-ready colors (hex, rgb, hsla, etc.),
///   or references other colors in the map.
///   Adjustments are a nested map of color function names and arguments,
///   using a `<origin-color> (<function-name>: <args...>)` syntax.
///   Adjustment functions are then called in this format:
///   `function-name($origin-color, $args...)`.
///
/// @see {function} color
///
/// @example scss - sample color palette
///   $colors: (
///     // 'name': <value> (<function-name>: <args>),
///
///     'brand-pink': hsl(330, 85%, 62%),
///     'brand-light': #fff,
///     'brand-dark': #222,
///
///     'background': 'brand-light',
///     'text': 'brand-dark',
///     'link': 'brand-pink',
///     'focus': 'link' ('darken': 15%),
///   );
$colors: () !default;


// Merge Colors
// ------------
/// Merge multiple color maps into a single map,
/// in case you want to define colors in smaller groups
/// such as `brand-colors`, `link-colors`, etc
/// but then treat them as a single map of colors.
/// To merge and update the global `$colors` variable,
/// use the `add-colors()` mixin.
///
/// @group a-config
///
/// @parameter {Map...} $maps -
///   Pass any number of maps to be merged.
/// @return {Map} -
///   The merged map.
/// @see colors
/// @see add-colors
@function merge-colors(
  $maps...
) {
  $return: ();

  @each $map in $maps {
    $return: map-merge($return, $map);
  }

  @return $return;
}


// Add Colors
// ----------
/// Merge multiple color maps into the global `$colors` map,
/// in case you want to define colors in smaller groups
/// such as `brand-colors`, `link-colors`, etc
/// before merging them into a single color-palette.
///
/// @group a-config
///
/// @parameter {Map...} $maps -
///   Pass any number of maps to be merged.
/// @see colors
@mixin add-colors (
  $maps...
) {
  $colors: merge-colors($colors, $maps...) !global;
}
