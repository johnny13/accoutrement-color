// Color Config
// ============
// Configure and access your color palette.


// Color Map
// ---------
/// Define your colors with a `name`, `value`,
/// and optional `adjustments`.
/// Each color in the map consists of a name (key),
/// and a value,
/// along with optional 'adjustments'.
///
/// - Color values can be CSS-ready colors (hex, rgb, hsla),
///   or references other color-keys in the map.
/// - Adjustments are a nested map of color functions and arguments,
///   using the `<origin-color> (<function-name>: <args...>)` syntax.
/// - Adjustment functions will be called in this format:
///   `function-name($origin-color, $args...)`,
///   which works with all Sass core color functions.
///
/// @group a-config
/// @see {function} color
///
/// @example scss - simple color definitions
///   $colors: (
///     'brand-pink': hsl(330, 85%, 62%),
///     'brand-light': #fff,
///     'brand-dark': #222,
///   );
/// @example scss - reference other colors
///   $colors: (
///     'background': 'brand-light',
///     'text': 'brand-dark',
///     'link': 'brand-pink',
///   );
/// @example scss - adjust referenced colors with any color function
///   $colors: (
///     'focus': 'link' ('darken': 15%, 'desaturate': 15%),
///   );
$colors: () !default;


// Add Colors
// ----------
/// Merge multiple color maps into the global `$colors` map,
/// in case you want to define colors in smaller groups
/// such as `brand-colors`, `link-colors`, etc
/// before merging them into a single color-palette.
/// This can be useful for internal organization,
/// documentation with SassDoc,
/// or integration with our pattern-library generator:
/// [Herman](http://oddbird.net/herman/).
///
/// @group a-config
///
/// @parameter {Map...} $maps -
///   Pass any number of maps to be merged.
/// @output -
///   An updated global `$colors` variable,
///   with new maps merged in.
///
/// @example scss
///   $brand-colors: (
///     'brand-pink': hsl(330, 85%, 62%),
///     'brand-light': #fff,
///     'brand-dark': #222,
///   );
///   $text-colors: (
///     'background': 'brand-light',
///     'text': 'brand-dark',
///     'link': 'brand-pink',
///   );
///   @include add-colors($brand-colors, $text-colors)
@mixin add-colors (
  $maps...
) {
  $colors: merge-colors($colors, $maps...) !global;
}



// Merge Colors
// ------------
/// Merge multiple color maps into a single map,
/// in case you want to define colors in smaller groups –
/// such as `brand-colors`, `link-colors`, etc. –
/// before merging them into a single map.
///
/// This is like `add-colors`,
/// but returns a combined map,
/// without assigning it to the `$colors` variable.
///
/// @group a-config
///
/// @parameter {maps...} $maps -
///   Pass any number of maps to be merged.
/// @return {map} -
///   The merged map of colors.
@function merge-colors(
  $maps...
) {
  $return: ();

  @each $map in $maps {
    $return: map-merge($return, $map);
  }

  @return $return;
}
