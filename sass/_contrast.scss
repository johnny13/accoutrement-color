// Color Contrast
// ==============


// WCAG Contrast
// -------------
/// Contrast ratios from the WCAG.
/// @access private
$wcag-contrast: (
  'aa-large': 3,
  'aa': 4.5,
  'aaa': 7,
);


// Contrast Ratio
// --------------
/// Get the WCAG contrast-ratio between any two colors in your palette.
///
/// @group contrast
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
///
/// @param {string | list | number} $color -
///   The name of a color in your palette,
///   with optional adjustments in the form of `(<function-name>: <args>)`,
///   or a pre-calculated luminance.
/// @param {string | list | number} $contrast -
///   The name of a color to contrast against the first,
///   with optional adjustments in the form of `(<function-name>: <args>)`,
///   or a pre-calculated luminance.
/// @param {'aa' | 'aa-large' | 'aaa' | number | false} $require [false] -
///   An optional contrast ratio to require.
///   The function will return false if the required ratio is not met.
/// @return {number} -
///   The WCAG-defined contrast-ratio of two colors.
///
/// @example scss
///   @import '~mathsass/dist/math';
///   /* black and white: #{contrast-ratio(white, black)} */
///   /* failed 'aaa': #{contrast-ratio(white, #999, 'aaa')} */
@function contrast-ratio(
  $base,
  $contrast,
  $require: false
) {
  $is-lumins: (type-of($base) == 'number');

  $base-lumin: if($is-lumins, $base, luminance($base));
  $contrast-lumin: if($is-lumins, $contrast, luminance($contrast));

  $darker: min($base-lumin, $contrast-lumin);
  $lighter: max($base-lumin, $contrast-lumin);

  $ratio: ($lighter + 0.05) / ($darker + 0.05);
  $require: map-get($wcag-contrast, $require) or $require;

  @if $require and ($ratio < $require) {
    @return false;
  }

  @return $ratio;
}


// Contrast
// --------
/// For any color, select the best contrast among a set of options.
/// For best results, pass a combination of light and dark colors
/// to contrast against.
///
/// @group contrast
///
/// @param {String | list} $color -
///   The name of a color in your palette,
///   with optional adjustments in the form of `(<function-name>: <args>)`.
/// @param {Arglist} $options [#000, #fff] -
///   Two or more colors to contrast against.
///   This function will choose the best contrast of all the options.
///   Will use `contrast-light` and `contrast-dark` as defaults
///   if they are defined in your color palette,
///   otherwise `white` and `black` are the default options.
/// @return {Color} -
///   Whichever color-option has the highest contrast-ratio to `$color`.
///
/// @example scss - default options
///   @import '~mathsass/dist/math';
///   $background: #333;
///   html {
///     background: $background;
///     color: contrast($background);
///   }
/// @example scss - explicit options
///   @import '~mathsass/dist/math';
///   $background: #333;
///   html {
///     background: $background;
///     color: contrast($background, red, orange, yellow, green, blue, indigo);
///   }
@function contrast(
  $color,
  $options...
) {
  // Establish default options if they are missing
  @if length($options) == 0 {
    $options: append($options, map-get($colors, 'contrast-light') or #fff);
    $options: append($options, map-get($colors, 'contrast-dark') or #000);
  } @else if length($options) == 1 {
    @error 'Provide at least two contrasting color options for `contrast()`';
  }

  // Get the colors and their contrasts
  $color-val: color($color);
  $color-lum: luminance($color-val);
  $color-list: ();
  $contrast-list: ();

  @each $item in $options {
    $item: color($item);
    $luminance: luminance($item);
    $contrast: contrast-ratio($color-lum, $luminance);

    $color-list: append($color-list, $item);
    $contrast-list: append($contrast-list, $contrast);
  }

  // Find the best results
  $best-ratio: max($contrast-list...);
  $best-color: nth($color-list, index($contrast-list, $best-ratio));

  @return $best-color;
}


// Contrasted
// ----------
/// For any background color,
/// select and apply the best contrasting text color from a set of options.
/// This works the same as the `contrast` function,
/// but applied the resulting values to `background-color`
/// and text `color` properties.
///
/// @group contrast
///
/// @param {String | list} $background -
///   The name of a color in your palette,
///   with optional adjustments in the form of `(<function-name>: <args>)`.
/// @param {Arglist} $options -
///   Colors to contrast against.
/// @output -
///   Sets the `background-color` to `$background`
///   and the foreground `color` to
///   whichever option has better contrast against the given background.
///
/// @example scss - default options
///   @import '~mathsass/dist/math';
///   $background: #333;
///   html {
///     @include contrasted($background);
///   }
/// @example scss - explicit options
///   @import '~mathsass/dist/math';
///   $background: #333;
///   html {
///     @include contrasted($background, red, orange, yellow, green, blue, indigo);
///   }
@mixin contrasted(
  $background,
  $options...
) {
  $background: color($background);

  background-color: $background;
  color: contrast($background, $options...);
}


// Luminance
// ---------
/// Get the WCAG luminance of a color in your palette.
///
/// **Warning**: Calculating luminance requires a `pow()` function
/// like the one available in
/// [MathSass](https://github.com/terkel/mathsass/blob/master/dist/functions/_pow.scss),
/// which is not included in this library.
///
/// @group contrast
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
///
/// @param {string | list} $color -
///   The name of a color in your palette,
///   with optional adjustments in the form of `(<function-name>: <args>)`.
/// @return {number} -
///   WCAG-defined luminance value
@function luminance(
  $color
) {
  $color: color($color);
  $luminance: 0;

  @if not function-exists('pow') {
    @error 'Luminance and contrast calculations require a `pow()` function '
    + 'like the one available from MathSass.';
  }

  @if (type-of($color) != 'color') {
    @error '`#{$color}` is not a color.';
  }

  @each $component in 'red' 'green' 'blue' {
    $value: call($component, $color) / 255;

    @if ($value < 0.03928) {
      $value: $value / 12.92;
    } @else {
      $value: pow((($value + 0.055) / 1.055), 2.4);
    }

    @if ($component == 'red') {
      $value: $value * 0.2126;
    } @else if ($component == 'green') {
      $value: $value * 0.7152;
    } @else {
      $value: $value * 0.0722;
    }

    $luminance: $luminance + $value;
  }

  @return $luminance;
}
