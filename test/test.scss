// Arrow Tests
// ===========

@import "true";

// Test Module
// -----------

$colors: (
  'blue': hsl(195, 85%, 62%),
  'orange': hsl(24, 100%, 62%),
  'red': hsl(0, 85%, 62%),

  simple: #969,
  primary: 'red',
  secondary: primary (tint: 30%, scale-saturation: -25%),
  alpha: simple (rgba: .5),
  wtf: secondary (adjust-hue: 24deg),
  hello: simple,
  hello-world: #969,
);

@include test-module(colors) {

  // colors (mixin)
  @include test(colors mixin) {
    $test: (tuesday: 'orange');
    $expect: $colors;

    @include assert-false(map-get($colors, tuesday),
      'There is no color named tuesday.');

    @include colors($test);

    @include assert-true(map-get($colors, tuesday),
      'There is now a color named tuesday.');

    @include assert-equal($colors, map-merge($expect, $test),
      'The $colors map has been updated.');
  }

  // color
  @include test(color) {
    $test: color(simple);
    $expect: map-get($colors, simple);
    @include assert-equal($test, $expect,
      'Returns simple color based on styleguide keyword');

    $test: color(hello-world);
    $expect: map-get($colors, simple);
    @include assert-equal($test, $expect,
      'Returns color based on list keyword');

    $test: color(primary);
    $expect: map-get($colors, 'red');
    @include assert-equal($test, $expect,
      'Returns color based on referential styleguide keyword');

    $test: color(secondary);
    $expect: scale-saturation(tint(map-get($colors, 'red'), 30%), -25%);
    @include assert-equal($test, $expect,
      'Returns color based on self-referential keyword and adjustments');

    $test: color(wtf);
    $expect: adjust-hue(scale-saturation(tint(map-get($colors, 'red'), 30%), -25%), 24deg);
    @include assert-equal($test, $expect,
      'Returns color based on multiple self-referential keywords and adjustments');
  }
}

// Report
// ------

@include report;

