// Arrow Tests
// ===========

@import '../../node_modules/sass-true/sass/true';
@import '../../sass/color';


$colors: (
  'blue': hsl(195, 85%, 62%),
  'orange': hsl(24, 100%, 62%),
  'red': hsl(0, 85%, 62%),

  'simple': #969,
  'primary': 'red',
  'secondary': 'primary' (tint: 30%, desaturate: 25%),
  'alpha': 'simple' (rgba: .5),
  'wtf': 'secondary' (adjust-hue: 24deg),
  'hello': 'simple',

  'dark': #111,
  'light': #eee,

  'contrast-dark': 'dark',
  'contrast-light': 'light',
);


// Add Color [mixin]
// -----------------
@include test-module('Add Color [mixin]') {
  @include test('Update $color map') {
    $test: ('tuesday': 'orange');

    @include assert-false(
      map-get($colors, 'tuesday'),
      'There is no color named tuesday.');

    @include add-color($test);

    @include assert-true(
      map-get($colors, 'tuesday'),
      'There is now a color named tuesday.');

    @include assert-equal(
      $colors,
      map-merge($colors, $test),
      'The $colors map has been updated.');
  }
}


// Color [function]
// ----------------
@include test-module('Color [function]') {
  @include test('Named color') {
    @include assert-equal(
      color('simple'),
      map-get($colors, 'simple'),
      'Returns simple color based on styleguide keyword');
  }

  @include test('Referenced color') {
    @include assert-equal(
      color('primary'),
      map-get($colors, 'red'),
      'Returns color based on referential styleguide keyword');
  }

  @include test('Adjusted color') {
    @include assert-equal(
      color('secondary'),
      desaturate(tint(map-get($colors, 'red'), 30%), 25%),
      'Returns color based on self-referential keyword and adjustments');
  }

  @include test('Complex nesting of colors') {
    @include assert-equal(
      color('wtf'),
      adjust-hue(desaturate(tint(map-get($colors, 'red'), 30%), 25%), 24deg),
      'Returns color based on multiple keywords and adjustments');
  }
}


// Tint [function]
// ---------------
@include test-module('Tint [function]') {
  @include test('Adjusts the tint of a color') {
    @include assert-equal(
      tint('primary', 25%),
      mix(#fff, color('primary'), 25%),
      'Returns a color mixed with white at a given weight.');
  }
}


// Shade [function]
// ----------------
@include test-module('Shade [function]') {
  @include test('Adjusts the shade of a color') {
    @include assert-equal(
      shade('primary', 25%),
      mix(#000, color('primary'), 25%),
      'Returns a color mixed with black at a given weight.');
  }
}


// Brightness [function]
// ---------------------
@include test-module('Brightness [function]') {
  @include test('Find the brightness of a color') {
    @include assert-equal(
      brightness('primary'),
      49.0154%,
      'Calculates the brightness of a color.');
  }
}


// Contrast [function]
// -------------------
@include test-module('Contrast [function]') {
  @include test('Dark on light') {
    @include assert-equal(
      contrast(#eee),
      color('contrast-dark'),
      'Returns a dark color to contrast a light one.');
  }

  @include test('Light on dark') {
    @include assert-equal(
      contrast('dark'),
      color('contrast-light'),
      'Returns a light color to contrast a dark one.');
  }

  @include test('Default light fallback') {
    @include assert-equal(
      contrast(#000, 'none', 'none'),
      #fff,
      'Returns white for light contrast when none is given.');
  }

  @include test('Default dark fallback') {
    @include assert-equal(
      contrast(#fff, 'none', 'none'),
      #000,
      'Returns black for dark contrast when none is given.');
  }
}


// Contrasted [mixin]
// ------------------
@include test-module('contrasted [mixin]') {
  @include test('Dark on light') {
    @include assert('Use a dark color on a light background.') {
      @include input {
        @include contrasted(#eee);
      }

      @include expect {
        background-color: #eee;
        color: color('contrast-dark');
      }
    }
  }

  @include test('Light on dark') {
    @include assert('Use a light color on a dark background.') {
      @include input {
        @include contrasted('dark');
      }

      @include expect {
        background-color: color('dark');
        color: color('contrast-light');
      }
    }
  }
}


@include report;
