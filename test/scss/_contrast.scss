// Contrast Tests
// ==============


// This is all kinda ugly,
// trying to test our luminance approximationâ€¦
$ac-color-no-warnings: true;

@function in-range(
  $one,
  $two,
  $range
) {
  $result: abs($one - $two) <= $range;

  @if ($result == false) {
    @debug abs($one - $two);
  }

  @return $result;
}

$test-colors: ();

@for $hue from 1 through 36 {
  $hue: random($hue * 10);

  @for $val from 1 through (100 / 20) {
    $val: random($val * 10);
    $val: $val * 1%;
    $hsl: hsl($hue, $val, $val / 2);
    $test-colors: append($test-colors, $hsl);
  }
}

$approx: ();
@each $c in $test-colors {
  $approx: append($approx, luminance($c));
}

@import '../../node_modules/mathsass/dist/math';

$pow: ();
@each $c in $test-colors {
  $pow: append($pow, luminance($c));
}


// Luminance [function]
// --------------------
@include test-module('Luminance [function]') {
  @include test('Returns proper luminance of a color') {
    @include assert-equal(
      luminance(#fff),
      1,
      'white',
      $inspect: true);

    @include assert-equal(
      luminance(#000),
      0,
      'black',
      $inspect: true);

    @include assert-equal(
      luminance(#ff0),
      0.9278,
      'yellow',
      $inspect: true);

    @include assert-equal(
      luminance(#0f0),
      0.7152,
      'green',
      $inspect: true);

    @include assert-equal(
      luminance(#3492a1),
      0.23861,
      'blue',
      $inspect: true);
  }

  @include test('Returns approximate luminance of a color') {
    @for $i from 1 through length($approx) {
      $a: nth($approx, $i);
      $p: nth($pow, $i);
      @include assert-true(
        in-range($a, $p, 0.0178),
        '#{$a} vs #{$p}');
    }
  }
}


// Contrast Ratio [function]
// -------------------------
@include test-module('Contrast Ratio [function]') {
  @include test('Returns contrast ratio between two colors') {
    @include assert-equal(
      contrast-ratio(#fff, #fff),
      1,
      'Any color has a contrast of 1 with itself.');

    @include assert-equal(
      contrast-ratio(#000, #fff),
      21,
      'Black and white have a contrast of 21.');
  }

  @include test('Approximation and proper math return similar ratios') {
    @for $i from 1 through length($test-colors) {
      $c1: nth($test-colors, $i);
      $a1: nth($approx, $i);
      $p1: nth($pow, $i);

      $i2: 0 - $i;
      $c2: nth($test-colors, $i2);
      $a2: nth($approx, $i2);
      $p2: nth($pow, $i2);

      @include assert-true(
        in-range(
          contrast-ratio($a1, $a2),
          contrast-ratio($p1, $p2),
          0.524
        ),
        '#{$c1} vs #{$c2}');
    }
  }
}


// Contrast [function]
// -------------------
@include test-module('Contrast [function]') {
  @include test('Dark on light') {
    @include assert-equal(
      contrast(#eee),
      color('contrast-dark'),
      'Returns a dark color to contrast a light one.');
  }

  @include test('Light on dark') {
    @include assert-equal(
      contrast('dark'),
      color('contrast-light'),
      'Returns a light color to contrast a dark one.');
  }

  $original-colors: $colors;
  $colors: () !global;

  @include test('Default light fallback') {
    @include assert-equal(
      contrast(#000),
      #fff,
      'Returns white for light contrast when none is given.');
  }

  @include test('Default dark fallback') {
    @include assert-equal(
      contrast(#fff),
      #000,
      'Returns black for dark contrast when none is given.');
  }

  $colors: $original-colors !global;

  @include test('Multiple contrast options') {
    @include assert-equal(
      contrast('primary', #ff0, #fcc, #0f0, 'light', #003),
      #003,
      'Returns the best option from the list.');
  }
}


// Contrasted [mixin]
// ------------------
@include test-module('contrasted [mixin]') {
  @include test('Dark on light') {
    @include assert('Use a dark color on a light background.') {
      @include output {
        @include contrasted(#eee);
      }

      @include expect {
        background-color: #eee;
        color: color('contrast-dark');
      }
    }
  }

  @include test('Light on dark') {
    @include assert('Use a light color on a dark background.') {
      @include output {
        @include contrasted('dark');
      }

      @include expect {
        background-color: color('dark');
        color: color('contrast-light');
      }
    }
  }
}
